function filterLink(link) {
	const LINK_TYPES = ['application/rss+xml', 'application/atom+xml'];
	return LINK_TYPES.includes(link.type);
}

function mapLink(link) {
	const {type, href, title = link.href} = link;
	return {type, href, title};
}

function scanThisPage() {
	const QUERY = 'link[rel="alternate"][type]';
	const LINKS = Array.from(document.querySelectorAll(QUERY));

	var feedLinks = LINKS.filter(filterLink).map(mapLink);
	if (feedLinks.length == 0 && document.head) {
		// If the page was generated by a known static site generator we may be able to infer the feed URL
		const GENERATOR = document.head.querySelector('meta[name="generator"]');
		const CANONICAL = document.head.querySelector('link[rel="canonical"]');
		const TITLE = document.head.title;
		if (GENERATOR && CANONICAL) {
			feedLinks = getGeneratorFeedLinks(GENERATOR.content, CANONICAL.href, TITLE);
		}
	}

	if (feedLinks.length > 0) {
		browser.runtime.sendMessage({
			type: 'feeds',
			links: feedLinks,
		}).catch(() => {});
	}
}

function getGeneratorFeedLinks(generatorName, canonicalUrl, title) {
	if (generatorName.startsWith('Hugo ')) {
		// Hugo generates an RSS feed at /index.xml
		return [{
			type: 'application/rss+xml',
			href: canonicalUrl + 'index.xml',
			title: title ? title : 'Hugo RSS Feed'
		}];
	}
	return [];
}

function messageHandler(msg) {
	switch (msg.type) {
	case 'scan':
		scanThisPage();
		break;
	}
}

browser.runtime.onMessage.addListener(messageHandler);
scanThisPage();
